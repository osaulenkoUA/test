function findTimes(n, x, y) {

    if (x===0) return y*n;  //якщо перший ксерокс зламаний все робимо на другому
    if (y===0) return x*n;  //якщо другий ксерокс зламаний все робимо на першому


	n--;                                        //відмінусовуємо одну копію для іншого ксерокса
	let timeForCopyArray = [];                  //масив в якому зберігатиметься час для всіх копій на ксероксах    

	//основна логіка: для прикладу 5 копій, x=1сек  y=2сек.
    //на кожній ітерації в масив timeForCopyArray заноситься найбільший час копій з окремого ксерокса
    //наприклад 1-ітерація: для першого ксерокса - (4-0)*1=4 сек.для другого - 0*2=0сек. Отже якщо працювати тільки на одному
    //ксероксі потрібно 4 секунди. Друга ітерація: 1 ксерокс (4-1)*1=3 сек , 2-й - 1*2=2сек. Разом вони зроблять 4 копії за 3 сек.
    //Третя ітерація: (4-2)*1=2 сек, 2*2=4сек Разом 4 копії за 4 сек  
    //четверта ітерація: (4-3)*1=1сек, 3*2=6сек Разом 4 копії за 6 сек
    //І остання ітерація: (4-4)*1=0, 4*2=8сек. Працюватиме тільки другий ксерокс 4 копії за 8 сек
    //timeForCopyArray = [4,3,4,6,8] найменший час коли працюватимуть обидва ксерокса для 4 копій - 3 сек.         

    for (let i = 0; i <= n; i++) timeForCopyArray.push(Math.max((n - i) * x, i * y));
	

return Math.min(...timeForCopyArray) + Math.min(x, y);        //додає час першої копії на найшвидшому ксероксі з мінімальним
                                                            // часом для ксерокопії на двох ксероксак n-1 копій 
}
const summTimes = findTimes(5, 1, 2);
console.log(summTimes);                                     // 4



